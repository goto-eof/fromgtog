name: Build e Package Linux DEB (Cross-Arch)

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build_jar:
    name: Build JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure JDK (Linux)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: mvn clean package

      - name: Upload Artifact (JAR and resources)
        uses: actions/upload-artifact@v4
        with:
          name: application-files
          path: |
            target/fromgtog.jar
            resources/

  create_packages:
    name: Package ${{ matrix.arch }} DEB
    runs-on: ubuntu-latest
    needs: build_jar
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        java-arch: [x64, aarch64]
        include:
          - arch: amd64
            java-arch: x64
            deb-arch-label: amd64
          - arch: arm64
            java-arch: aarch64
            deb-arch-label: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Define release version
        id: set_version
        run: |
          echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "Release Tag set on: ${GITHUB_REF_NAME}"

      - name: Setup QEMU (per ARM64 Cross-Build)
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Download Artifact (JAR and resources)
        uses: actions/download-artifact@v4
        with:
          name: application-files
          path: downloaded-files

      - name: Configure JDK for ${{ matrix.arch }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: ${{ matrix.java-arch }} # Scarica la JDK corretta

      - name: Install required dependencies for jpackage
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev

      - name: Create DEB package with jpackage
        run: |
          INPUT_PATH="downloaded-files/target"
          OUTPUT_PATH="executable"
          MAIN_JAR="fromgtog.jar"
          ICON_PATH="downloaded-files/resources/icon-linux.png"

          # Il jpackage per arm64 verrà eseguito in emulazione QEMU
          # ma creerà un pacchetto nativo per ARM64
          jpackage \
            --input "$INPUT_PATH" \
            --dest "$OUTPUT_PATH" \
            --name "FromGtoG" \
            --vendor "Andrei Dodu" \
            --app-version "$RELEASE_TAG" \
            --main-jar "$MAIN_JAR" \
            --main-class com.andreidodu.fromgtog.Main \
            --icon "$ICON_PATH" \
            --type deb \
            --linux-shortcut \
            --java-options "-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true" \
            --add-modules java.base,java.desktop,java.net.http,java.naming,java.sql,java.management,java.security.jgss,java.xml,java.logging,jdk.crypto.ec,java.security.sasl \
            --verbose

      - name: Zip DEB file
        run: |
          DEB_FILE=$(find executable -name "*.deb")
          # Rinomina e zippa il file usando l'architettura corretta dalla matrice
          FINAL_DEB_NAME="fromgtog_${RELEASE_TAG}_${{ matrix.deb-arch-label }}.deb"
          mv "$DEB_FILE" "$FINAL_DEB_NAME"
          
          ZIP_NAME="${{ github.event.repository.name }}-Linux-${{ github.ref_name }}-${{ matrix.deb-arch-label }}-Installer.zip"
          zip -j "$ZIP_NAME" "$FINAL_DEB_NAME"

      - name: Release on GitHub
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ github.event.repository.name }}-Linux-${{ github.ref_name }}-${{ matrix.deb-arch-label }}-Installer.zip
