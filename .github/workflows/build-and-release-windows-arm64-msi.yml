name: Create Windows ARM64 MSI file

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  # Riferimento al job esistente (assumendo che build_jar esista nel tuo repo)
  build_jar:
    name: Build JAR
    # Questo step è necessario per far funzionare il "needs" se il job è in un file separato.
    # Se il job build_jar è nel file multiplatform-release.yml, questo può essere rimosso.
    # Assumiamo sia un job di build minimale per dipendenza:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build JAR with Maven
        run: mvn clean package
      - name: Upload Artifact (JAR and resources)
        uses: actions/upload-artifact@v4
        with:
          name: application-files
          path: |
            target/fromgtog.jar
            resources/

  create_windows_arm_package:
    name: Package Windows ARM64 MSI
    runs-on: windows-latest # Deve essere Windows per creare pacchetti Windows
    needs: build_jar
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install WiX Toolset
        # Necessario per creare pacchetti MSI su Windows (richiesto da jpackage)
        uses: wierob/setup-wix-toolset@v1
        with:
          version: 3.11.2

      - name: Define release version
        id: set_version
        run: |
          echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> $ENV:GITHUB_ENV
          echo "Release Tag set on: ${GITHUB_REF_NAME}"

      - name: Download Artifact (JAR and resources)
        uses: actions/download-artifact@v4
        with:
          name: application-files
          path: downloaded-files

      # Configura la JDK Windows SPECIFICA per l'architettura ARM64 (AArch64)
      - name: Configure JDK for Windows ARM64
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: aarch64 # Scarica JDK Windows ARM64

      - name: Create MSI package with jpackage
        run: |
          $INPUT_PATH="downloaded-files\target"
          $OUTPUT_PATH="executable"
          $MAIN_JAR="fromgtog.jar"
          # L'icona deve essere in formato ICO per Windows
          $ICON_PATH="downloaded-files\resources\icon-windows.ico" 

          mkdir $OUTPUT_PATH

          # jpackage ora utilizza l'eseguibile jpackage nativo Windows che si trova 
          # all'interno della JDK Windows ARM64 appena scaricata, creando un pacchetto MSI ARM64.
          jpackage `
            --input "$INPUT_PATH" `
            --dest "$OUTPUT_PATH" `
            --name "FromGtoG" `
            --vendor "Andrei Dodu" `
            --app-version "$RELEASE_TAG" `
            --main-jar "$MAIN_JAR" `
            --main-class com.andreidodu.fromgtog.Main `
            --icon "$ICON_PATH" `
            --type msi `
            --win-dir-chooser `
            --win-shortcut `
            --java-options "-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true" `
            --add-modules java.base,java.desktop,java.net.http,java.naming,java.sql,java.management,java.security.jgss,java.xml,java.logging,jdk.crypto.ec,java.security.sasl `
            --verbose

      - name: Release Windows ARM64 Artifact
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: executable/*.msi
          name: Windows ARM64 Installer ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
